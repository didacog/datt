#!/bin/bash
#
# datt script (DRLM Automated Testing Tool)


# Define generic variables
PROGNAME=${0##*/}
VERSION=0.1

# dirs
BIN_DIR="./bin"
CONF_DIR="./conf"
TESTS_DIR="./tests"
LIBS_DIR="./libs"
SHARE_DIR="./share"
VAGRANT_DIR="./vagrant"
# files
ENV_CONF_LOCK="$VAGRANT_DIR/conf/env_conf.lock"
VAGRANT_BOXES_ARRAY_FILE=$VAGRANT_DIR/conf/boxes.rb

# Load datt libraries
for lib in $(ls $LIBS_DIR/*)
do
    source $lib 
done
# Load datt configurations
for cfg in default boxes servers clients
do
    source $CONF_DIR/$cfg.conf
done

# Vagrant variables
VAGRANT_DEFAULT_PROVIDER=libvirt
VAGRANT_CWD=$VAGRANT_DIR
export VAGRANT_DEFAULT_PROVIDER VAGRANT_CWD


echo "
+----------------------------------------------+
|         DRLM Automated Testing Tool          |
|             version $VERSION                      |
+----------------------------------------------+
Author: Didac Oliveira
Copyright: GPL v3
"


#if [[ $(id -u) -ne 0 ]] ; then
#    Error "Please run $PRGNAME as root"
#fi


# check if vagrant is present
if ! type -p vagrant &>/dev/null ; then
    Error "Please install Vagrant 1.8.7 or higher"
fi

# hard-code the correct security settings on vagrant SSH keys
if [[ -f $VAGRANT_DIR/insecure_keys/ssh.priv ]] ; then
    chmod 600 $VAGRANT_DIR/insecure_keys/ssh.priv
    chmod 644 $VAGRANT_DIR/insecure_keys/ssh.pub
else
    Error "file $VAGRANT_DIR/insecure_keys/ssh.priv not found"
fi

# Have we the provider installed? Check the basics - are the main paths there or not?
[[ ! -d /var/lib/libvirt ]] && Error "Libvirt seems not to be installed"


#while getopts ":s:c:t:vh" opt; do
#    case "$opt" in
#        s) servers=( $(echo "$OPTARG" | tr ',' ' ') ) ;;
#        c) clients=( $(echo "$OPTARG" | tr ',' ' ') );;
#	t) tests=( $(echo "$OPTARG" | tr ',' ' ') ) ;;
#        h) helpMsg; exit 0 ;;
#        v) echo "$PROGNAME version $VERSION"; exit 0 ;;
#       \?) echo "$PROGNAME: unknown option used: [$OPTARG]."
#           helpMsg; exit 0 ;;
#    esac
#done
#shift $(( OPTIND - 1 ))

DATT_CMD=$1
DATT_SUBCMD=$2
OPTIND=3
case "$DATT_CMD" in
vagrant)
    case "$DATT_SUBCMD" in
        setup) 
            # setup defined vagrant environment for testing
            while getopts ":s:c:t:vh" opt; do
                case "$opt" in
                    s) servers=( $(echo "$OPTARG" | tr ',' ' ') ) ;;
                    c) clients=( $(echo "$OPTARG" | tr ',' ' ') ) ;;
                    #t) tests=( $(echo "$OPTARG" | tr ',' ' ') ) ;;
                    h) helpMsg; exit 0 ;;
                    v) echo "$PROGNAME version $VERSION"; exit 0 ;;
                   \?) echo "$PROGNAME: unknown option used: [$OPTARG]."
                       helpMsg; exit 0 ;;
                esac
            done
            if [[ -f $ENV_CONF_LOCK ]];then
                Error "$PROGNAME:vagrant:setup: Another Environment is already enabled! Please run [destroy] to be able to prepare a new environment."
            else
                SourceStage "vagrant/setup"
            fi
            exit 0
            ;;
        up) 
            # start defined vagrant environment for testing
            if [[ -f $ENV_CONF_LOCK ]];then
            source $ENV_CONF_LOCK
            SourceStage "vagrant/up"
            else
                Error "$PROGNAME:vagrant:up: Environment is not ready! Please run [setup] to prepare the environment."
            fi
            exit 0
            ;;
        destroy) 
            # destroy defined vagrant environment for testing
            SourceStage "vagrant/destroy"
            ;;
        suspend) 
            # suspend defined vagrant environment for testing
            SourceStage "vagrant/suspend"
            ;;
        resume) 
            # resume defined vagrant environment for testing
            SourceStage "vagrant/resume"
            ;;
        status) 
            # show status vagrant environment for testing
            if [[ -f $ENV_CONF_LOCK ]];then
            source $ENV_CONF_LOCK
            SourceStage "vagrant/status"
            else
                Error "$PROGNAME:vagrant:status: Environment is not ready! Please run [setup] to prepare the environment."
            fi
            exit 0
            ;;
        halt) 
            # halt defined vagrant environment for testing
            SourceStage "vagrant/halt"
            ;;
        *) echo "$PROGNAME: unknown command used: [$DATT_CMD $DATT_SUBCMD]."
           helpMsg; exit 0 ;;
    esac
    ;;
test)
    case "$DATT_SUBCMD" in
        setup) 
            # prepare defined tests to run in the prepared environment
            SourceStage "test/setup"
            ;;
        list) 
            # list available tests to run in the prepared environment
            SourceStage "test/list"
            ;;
        run) 
            # run defined tests in the environment
            SourceStage "test/run"
            ;;
        *) echo "$PROGNAME: unknown command used: [$DATT_CMD $DATT_SUBCMD]."
           helpMsg; exit 0 ;;
    esac
    ;;
esac


# Check and/or add the client/server IP addresses to the local /etc/hosts file
#grep -q "^$client" /etc/hosts
#if [[ $? -eq 1 ]] ;then
#   echo "Add IP addresses of client and server to /etc/hosts file (on the vagrant host)"
#   echo "192.168.33.10   vagrant-client" >> /etc/hosts
#   echo "192.168.33.15   vagrant-server" >> /etc/hosts
#   echo "192.168.33.1    vagrant-host" >> /etc/hosts
#fi


# trap Cntrl-C interrupts during vagrant calls (we will foresee a small time to interrupt
# during a period that is safe - meaning do not scratch a VM box)
#trap '' SIGINT

# start up and client server vagrant VMs (the recover VM stays down)
#echo "$(italic Bringing up the vagrant VMs client and server)"
#vagrant up
#echo

#trap - SIGINT       # disable the trap
#echo "$(italic Sleep for 5 seconds [$(bold Control-C) is now possible])"
#sleep 5
#echo

#echo "------------------------------------------------------------------------------"
#vagrant status
#echo "------------------------------------------------------------------------------"
#echo

# if we are dealing with virtualbox if might be that $client/$server are not pingable due to an
# bug in vagrant itself
# Work-around is to check if "eth1" is active - if not then restart the network
#echo "Check if 'eth1' is active on client $(italic [known issue https://github.com/mitchellh/vagrant/issues/8166])"
#vagrant ssh client -c "sudo su -c \"ip addr show dev eth1 | grep -q DOWN && systemctl restart network.service\""

#echo "Check if 'eth1' is active on server"
#vagrant ssh server -c "sudo su -c \"ip addr show dev eth1 | grep -q DOWN && systemctl restart network.service\""

#echo "$(bold Doing ping tests to VMs client and server)"
#if IsNotPingable $client ; then
#    Error "VM $client is not pingable - please investigate why"
#else
#    echo "$(bold client) is up and running - ping test $(green OK)"
#fi
#

#if IsNotPingable $server ; then
#    Error "VM $server is not pingable - please investigate why"
#else
#    echo "$(bold server) is up and running - ping test $(green OK)"
#fi

#ssh -i ../insecure_keys/vagrant.private root@$client "timeout 3m yum -y update rear" 2>/dev/null

#exit 0
